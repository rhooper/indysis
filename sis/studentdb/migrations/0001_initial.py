# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-09-09 15:52
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields
import sis.studentdb.models
import sis.studentdb.thumbs


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AfterschoolPackage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('cost', models.DecimalField(decimal_places=2, help_text='List Price', max_digits=6)),
                ('days', models.IntegerField(default=1, help_text='Number of days included')),
                ('carryover', models.BooleanField(default=False, help_text='Do days carry over during the schoolyear')),
                ('pooled', models.BooleanField(default=False, help_text='Package is a pool of prepaid days')),
                ('shared', models.BooleanField(default=False, help_text='Pooled days shared with siblings')),
                ('monday', models.BooleanField(default=True)),
                ('tuesday', models.BooleanField(default=True)),
                ('wednesday', models.BooleanField(default=True)),
                ('thursday', models.BooleanField(default=True)),
                ('friday', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-monday', '-tuesday', '-wednesday', '-thursday', '-friday'],
            },
        ),
        migrations.CreateModel(
            name='AfterschoolPackagesPurchased',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_registered', models.DateField(blank=True, default=datetime.datetime.now, help_text='MM/DD/YYYY', null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.AfterschoolPackage')),
            ],
            options={
                'verbose_name': 'Afterschool packages purchased',
                'verbose_name_plural': 'Afterschool packages purchased',
            },
        ),
        migrations.CreateModel(
            name='AfterschoolProgramAttendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, db_index=True, default=datetime.datetime.now, help_text='MM/DD/YYYY', null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('days', models.PositiveIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='AfterschoolRegsitrationPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=datetime.date.today, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('end_date', models.DateField(default=datetime.date.today, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='BeforeschoolProgramAttendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, db_index=True, default=datetime.datetime.now, help_text='MM/DD/YYYY', null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('days', models.PositiveIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='BulkAfterschoolAttendanceEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=datetime.datetime.now, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BulkBeforeschoolAttendanceEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=datetime.datetime.now, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BulkFoodOrderEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('honorific', models.CharField(blank=True, default='', help_text='Prefix such as Dr. Mme. Mrs. M. Mlle. Mr.', max_length=16, verbose_name='Honorific')),
                ('fname', models.CharField(max_length=255, verbose_name='First Name')),
                ('mname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Middle Name')),
                ('lname', models.CharField(max_length=255, verbose_name='Last Name')),
                ('employer', models.CharField(blank=True, max_length=255, verbose_name='Employer')),
                ('job_title', models.CharField(blank=True, max_length=255, verbose_name='Job Title')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('relationship_to_student', models.CharField(blank=True, choices=[('Mother', 'Mother'), ('Father', 'Father'), ('Grandparent', 'Grandparent'), ('Grandmother', 'Grandmother'), ('Grandfather', 'Grandfather'), ('Aunt/Uncle', 'Aunt/Uncle'), ('Aunt', 'Aunt'), ('Uncle', 'Uncle'), ('Sibling', 'Sibling'), ('Sister', 'Sister'), ('Brother', 'Brother'), ('Legal Guardian', 'Legal Guardian'), ('Physician', 'Physician'), ('Nanny', 'Nanny'), ('Babysitter', 'Babysitter'), ('Other', 'Other'), ('Emergency', 'Emergency'), ('Friend', 'Friend'), ('Neighbour', 'Neighbour'), ('', '(Unspecified)')], max_length=500)),
                ('street', models.CharField(blank=True, help_text='Include apt number', max_length=255, null=True)),
                ('city', models.CharField(blank=True, default=sis.studentdb.models.get_city, max_length=255, null=True)),
                ('state', sis.studentdb.models.CAUSStateField(blank=True, max_length=2, null=True, verbose_name='Province')),
                ('zip', models.CharField(blank=True, max_length=10, null=True, verbose_name='Postal Code')),
                ('email', models.EmailField(blank=True, help_text='Primary email.', max_length=254)),
                ('alt_email', models.EmailField(blank=True, help_text='Alternate email address.', max_length=254)),
                ('primary_contact', models.BooleanField(default=True, help_text='This contact is where mailings should be sent to. In the event of an emergency, this is the person that will be contacted first.')),
                ('emergency_only', models.BooleanField(default=False, help_text='Only contact in case of emergency')),
                ('no_reportcard_emails', models.BooleanField(default=False, help_text='Do not send report cards by email')),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('long', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
            ],
            options={
                'verbose_name': 'Student contact',
                'ordering': ('primary_contact', 'lname'),
            },
        ),
        migrations.CreateModel(
            name='EmergencyContactNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', phonenumber_field.modelfields.PhoneNumberField(max_length=128)),
                ('ext', models.CharField(blank=True, max_length=10, null=True)),
                ('type', models.CharField(blank=True, choices=[('H', 'Home'), ('C', 'Cell'), ('W', 'Work'), ('O', 'Other')], max_length=2)),
                ('note', models.CharField(blank=True, max_length=255)),
                ('primary', models.BooleanField(default=False)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentdb.EmergencyContact')),
            ],
            options={
                'verbose_name': 'Student contact phone number',
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128)),
                ('ext', models.CharField(blank=True, max_length=10, null=True)),
                ('teacher', models.BooleanField(default=False)),
                ('signature', sis.studentdb.thumbs.ImageWithThumbsField(blank=True, help_text='Signature for Report Cards', null=True, upload_to='signatures')),
            ],
            options={
                'verbose_name_plural': 'Faculty',
                'ordering': ('last_name', 'first_name'),
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FoodOrderEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Short description of food order event', max_length=255)),
                ('date', models.DateField(blank=True, help_text='Event Date', null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('notes', models.CharField(blank=True, max_length=4000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodOrderItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(help_text='Name of item', max_length=255)),
                ('active', models.BooleanField(default=True, help_text='Whether to list in the data entry form')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentdb.FoodOrderEvent')),
            ],
        ),
        migrations.CreateModel(
            name='GradeLevel',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Grade Number')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Grade Name')),
                ('shortname', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Abbreviation')),
                ('name_fr', models.CharField(blank=True, max_length=150, null=True, verbose_name='Grade Name FR')),
                ('shortname_fr', models.CharField(blank=True, max_length=20, null=True, verbose_name='Abbreviation FR')),
                ('is_active', models.BooleanField(default=True)),
                ('next_grade', models.ForeignKey(help_text='Next grade level when rolling over years', null=True, on_delete=django.db.models.deletion.CASCADE, to='studentdb.GradeLevel')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='LanguageChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('iso_code', models.CharField(blank=True, help_text='ISO 639-1 Language code  http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes', max_length=2)),
                ('default', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ReasonLeft',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('start_date', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('end_date', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('grad_date', models.DateField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('active_year', models.BooleanField(default=False, help_text='DANGER!! This is the current school year. There can only be one and setting this will remove it from other years. If you want to change the active year you almost certainly want to click Management, Change School Year.')),
                ('principal_title', models.CharField(default='Head of School / Directeur', max_length=80)),
                ('vice_principal_title', models.CharField(default='Assistant Head / Directeur adjointe', max_length=80)),
                ('principal', models.ForeignKey(blank=True, help_text="This school year's headmaster/principal", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='principal', to='studentdb.Faculty')),
                ('vice_principal', models.ForeignKey(blank=True, help_text="This school year's assistant headmaster/vice principal", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vice_principal', to='studentdb.Faculty')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('mname', models.CharField(blank=True, max_length=150, null=True, verbose_name='Middle Name(s)')),
                ('grad_date', models.DateField(blank=True, help_text='MM/DD/YYYY', null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('pic', sis.studentdb.thumbs.ImageWithThumbsField(blank=True, null=True, upload_to='student_pics')),
                ('alert', models.CharField(blank=True, help_text='Warn any user who accesses this record with this text', max_length=500)),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], default='F', max_length=1, null=True)),
                ('bday', models.DateField(blank=True, help_text='MM/DD/YYYY', null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))], verbose_name='Birth Date')),
                ('date_dismissed', models.DateField(blank=True, help_text='MM/DD/YYYY', null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('unique_id', models.IntegerField(blank=True, help_text='For integration with outside databases', null=True, unique=True)),
                ('healthcard_no', models.CharField(blank=True, max_length=20, null=True, verbose_name='Health Card No')),
                ('activation_date', models.DateField(blank=True, help_text='MM/DD/YYYY', null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))], verbose_name='Registration Date')),
                ('parent_guardian', models.CharField(blank=True, editable=False, max_length=150)),
                ('street', models.CharField(blank=True, editable=False, max_length=150, null=True)),
                ('state', sis.studentdb.models.CAUSStateField(blank=True, editable=False, max_length=2, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('zip', models.CharField(blank=True, editable=False, max_length=10, null=True)),
                ('parent_email', models.EmailField(blank=True, editable=False, max_length=254, null=True)),
                ('alt_email', models.EmailField(blank=True, help_text='Alternative student email that is not their school email.', max_length=254)),
                ('notes', models.TextField(blank=True)),
                ('individual_education_program', models.BooleanField(default=False)),
                ('photo_permission', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='Yes', max_length=20, null=True)),
                ('afterschool_only', models.BooleanField(default=False)),
                ('afterschool_grade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asp_grade', to='studentdb.GradeLevel', verbose_name='ASP attendance grade level')),
                ('emergency_contacts', models.ManyToManyField(blank=True, to='studentdb.EmergencyContact', verbose_name='Student contact')),
                ('family_preferred_language', models.ForeignKey(blank=True, default=sis.studentdb.models.get_default_language, null=True, on_delete=django.db.models.deletion.SET_NULL, to='studentdb.LanguageChoice')),
                ('reason_left', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='studentdb.ReasonLeft')),
                ('siblings', models.ManyToManyField(blank=True, to='studentdb.Student')),
                ('year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='studentdb.GradeLevel', verbose_name='Grade level')),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
                'permissions': (('view_student', 'View student'), ('reports', 'View reports')),
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='student_files')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentdb.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentFoodOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', sis.studentdb.models.IntegerRangeField(default=1)),
                ('bulkentry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='studentdb.BulkFoodOrderEntry')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentdb.FoodOrderItem')),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentdb.SchoolYear')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentdb.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentHealthConcern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Allergy', 'Allergy'), ('Intolerance', 'Food intolerance'), ('Condition', 'Medical condition/disease/syndrome'), ('Diet', 'Dietary restriction(s)'), ('Other', 'Other')], max_length=20)),
                ('name', models.CharField(help_text='Short description of health concern', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Treatment or condition details')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentdb.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentHealthRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record', models.TextField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentdb.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', phonenumber_field.modelfields.PhoneNumberField(max_length=128)),
                ('ext', models.CharField(blank=True, max_length=10, null=True)),
                ('type', models.CharField(blank=True, choices=[('H', 'Home'), ('C', 'Cell'), ('W', 'Work'), ('O', 'Other')], max_length=2)),
                ('note', models.CharField(blank=True, max_length=255)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='studentdb.Student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeacherHomeroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=True)),
                ('grade_level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.GradeLevel')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.Faculty')),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('shortname', models.CharField(max_length=255)),
                ('start_date', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('end_date', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('active', models.BooleanField(default=True)),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.SchoolYear')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('include_deleted_students', models.BooleanField(default=False, help_text='When searching for students, include past students.')),
                ('user', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VolunteerHour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hours', sis.studentdb.models.IntegerRangeField(default=1)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.SchoolYear')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentdb.Student')),
            ],
        ),
        migrations.AddField(
            model_name='faculty',
            name='teaching_language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='studentdb.LanguageChoice'),
        ),
        migrations.AddField(
            model_name='beforeschoolprogramattendance',
            name='bulkentry',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='studentdb.BulkBeforeschoolAttendanceEntry'),
        ),
        migrations.AddField(
            model_name='beforeschoolprogramattendance',
            name='school_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.SchoolYear'),
        ),
        migrations.AddField(
            model_name='beforeschoolprogramattendance',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.Student'),
        ),
        migrations.AddField(
            model_name='afterschoolregsitrationperiod',
            name='school_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.SchoolYear'),
        ),
        migrations.AddField(
            model_name='afterschoolprogramattendance',
            name='bulkentry',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='studentdb.BulkAfterschoolAttendanceEntry'),
        ),
        migrations.AddField(
            model_name='afterschoolprogramattendance',
            name='school_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.SchoolYear'),
        ),
        migrations.AddField(
            model_name='afterschoolprogramattendance',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.Student'),
        ),
        migrations.AddField(
            model_name='afterschoolpackagespurchased',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.Student'),
        ),
        migrations.AddField(
            model_name='afterschoolpackage',
            name='period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studentdb.AfterschoolRegsitrationPeriod'),
        ),
        migrations.AlterUniqueTogether(
            name='beforeschoolprogramattendance',
            unique_together=set([('student', 'date')]),
        ),
        migrations.AlterUniqueTogether(
            name='afterschoolprogramattendance',
            unique_together=set([('student', 'date')]),
        ),
    ]
